package _01StackQueues;

import java.util.*;

public class _00Demo {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        //------------------------------------
        // 1. Stack (LIFO - Last In First Out)
        //------------------------------------

        // * –°—Ç–µ–∫—ä—Ç –µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –ø—Ä–∏ –∫–æ—è—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏—è—Ç –¥–æ–±–∞–≤–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –µ –ø—ä—Ä–≤–∏—è—Ç –∏–∑–≤–∞–¥–µ–Ω (–∫–∞—Ç–æ –∫—É–ø—á–∏–Ω–∞ —á–∏–Ω–∏–∏).

        //  –ò–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è (–ø—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–Ω–æ —Å ArrayDeque)
        //ArrayDeque<String> stack = new ArrayDeque<>();  // –ú–æ–¥–µ—Ä–µ–Ω –Ω–∞—á–∏–Ω (–≤–º–µ—Å—Ç–æ –æ—Å—Ç–∞—Ä–µ–ª–∏—è Stack)

        //üîπ –û—Å–Ω–æ–≤–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:

        //stack.push(e)	  -> –î–æ–±–∞–≤—è –µ–ª–µ–º–µ–Ω—Ç –Ω–∞ –≤—ä—Ä—Ö–∞ –Ω–∞ —Å—Ç–µ–∫–∞
        //stack.pop()	  -> –ü—Ä–µ–º–∞—Ö–≤–∞ –∏ –≤—Ä—ä—â–∞ –µ–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç –≤—ä—Ä—Ö–∞
        //stack.peek()	  -> –î–æ—Å—Ç—ä–ø–≤–∞–Ω–µ –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç –æ—Ç —Å—Ç–µ–∫–∞
        //stack.isEmpty() -> –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ —Å—Ç–µ–∫—ä—Ç –µ –ø—Ä–∞–∑–µ–Ω

        // –ü–†–ò–ú–ï–†:

        /*ArrayDeque<String> st = new ArrayDeque<>();
        st.push("Java");
        st.push("Python");
        st.push("C++");

        System.out.println(stack.pop());  // "C++" (–ø–æ—Å–ª–µ–¥–Ω–∏—è—Ç –≤–ª—è–∑—ä–ª)
        System.out.println(stack.peek()); // "Python" (–Ω–æ–≤ –≤—ä—Ä—Ö)*/



        //-------------------------------------
        // 2.QUEUE  (FIFO - First In First Out)
        //-------------------------------------

        // * –û–ø–∞—à–∫–∞—Ç–∞ –µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –ø—Ä–∏ –∫–æ—è—Ç–æ –ø—ä—Ä–≤–∏—è—Ç –¥–æ–±–∞–≤–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –µ –ø—ä—Ä–≤–∏—è—Ç –∏–∑–≤–∞–¥–µ–Ω (–∫–∞—Ç–æ –æ–ø–∞—à–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω).

        //  –ò–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è (–æ–±–∏–∫–Ω–æ–≤–µ–Ω–∞ –æ–ø–∞—à–∫–∞):

        // Queue<Integer> queue = new LinkedList<>();  // –∏–ª–∏ new ArrayDeque<>()
        // ArrayDeque<Integer> queue = new ArrayDeque<>();

        // üîπ –û—Å–Ω–æ–≤–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:

        //queue.offer(e) / queue.add(e) ->	–î–æ–±–∞–≤—è –µ–ª–µ–º–µ–Ω—Ç –≤ –∫—Ä–∞—è –Ω–∞ –æ–ø–∞—à–∫–∞—Ç–∞
        // queue.poll() / queue.remove() ->	–ü—Ä–µ–º–∞—Ö–≤–∞ –∏ –≤—Ä—ä—â–∞ –µ–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç –Ω–∞—á–∞–ª–æ—Ç–æ
        // queue.peek()	 -> –í—Ä—ä—â–∞ –µ–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç –Ω–∞—á–∞–ª–æ—Ç–æ –ë–ï–ó –¥–∞ –≥–æ –ø—Ä–µ–º–∞—Ö–≤–∞
        // queue.isEmpty() ->	–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –æ–ø–∞—à–∫–∞—Ç–∞ –µ –ø—Ä–∞–∑–Ω–∞


        // –ü–†–ò–ú–ï–†:

        //Queue<String> queue = new LinkedList<>();

        /*ArrayDeque<String> qu = new ArrayDeque<>();
        qu.offer("Apple");
        qu.offer("Banana");
        qu.offer("Cherry");

        System.out.println(qu.poll());  // "Apple" (–ø—ä—Ä–≤–∏—è—Ç –≤–ª—è–∑—ä–ª)
        System.out.println(qu.peek());  // "Banana" (–Ω–æ–≤ –ø—ä—Ä–≤–∏ –µ–ª–µ–º–µ–Ω—Ç)*/


        //--------------------------------------
        // 3. PriorityQueue (–û–ø–∞—à–∫–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        //--------------------------------------

        // –ò–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è:

                // –ü–æ–¥—Ä–µ–∂–¥–∞ –æ—Ç –Ω–∞–π-–º–∞–ª–∫–æ—Ç–æ –∫—ä–º –Ω–∞–π-–≥–æ–ª—è–º–æ—Ç–æ
        // Queue<Integer> priorityQueue = new PriorityQueue<>();

                // –ü–æ–¥—Ä–µ–∂–¥–∞ –æ—Ç –Ω–∞–π-–≥–æ–ª—è–º–æ—Ç–æ –∫—ä–º –Ω–∞–π-–º–∞–ª–∫–æ—Ç–æ
         Queue<Integer> maxHeap = new PriorityQueue<>(Comparator.reverseOrder());


        // üîπ –û—Å–Ω–æ–≤–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:

        // priorityQueue.offer(e) -> –î–æ–±–∞–≤—è –µ–ª–µ–º–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–æ—Ä—Ç–∏—Ä–∞–Ω–µ
        // priorityQueue.poll()	  -> –ü—Ä–µ–º–∞—Ö–≤–∞ –∏ –≤—Ä—ä—â–∞ –Ω–∞–π-–≤–∞–∂–Ω–∏—è –µ–ª–µ–º–µ–Ω—Ç
        // priorityQueue.peek()	  -> –í—Ä—ä—â–∞ –Ω–∞–π-–≤–∞–∂–Ω–∏—è –µ–ª–µ–º–µ–Ω—Ç –±–µ–∑ –¥–∞ –≥–æ –ø—Ä–µ–º–∞—Ö–≤–∞

        // –ü–†–ò–ú–ï–† :

        PriorityQueue<Integer> pQu = new PriorityQueue<>();
        pQu.offer(5);
        pQu.offer(1);
        pQu.offer(10);

        System.out.println(pQu.poll());  // 1 (–Ω–∞–π-–º–∞–ª–∫–æ—Ç–æ —á–∏—Å–ª–æ)
        System.out.println(pQu.poll());  // 5
        System.out.println(pQu.poll());  // 10


        /*
         ‚ùì –ö–æ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–≥–∞ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ?

         -> Stack	–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Ä–µ–∫—É—Ä—Å–∏—è,  –æ–ø–µ—Ä–∞—Ü–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
         -> Queue	–ó–∞–¥–∞—á–∏, –∫–æ–∏—Ç–æ –∏–∑–∏—Å–∫–≤–∞—Ç FIFO (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∑–∞—è–≤–∫–∏)	–û–ø–∞—à–∫–∞ –æ—Ç –∑–∞–¥–∞—á–∏ –∑–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ
         -> PriorityQueue	–ó–∞–¥–∞—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–Ω–∞–π-–≤–∞–∂–Ω–æ—Ç–æ –ø—ä—Ä–≤–æ)	–°–∏—Å—Ç–µ–º–∞ –∑–∞ –±—ä—Ä–∑–∞ –ø–æ–º–æ—â –≤ –±–æ–ª–Ω–∏—Ü–∞

          üéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ: --> –∏–∑–ø–æ–ª–∑–≤–∞–π ArrayDeque<>();

         ArrayDeque<Integer> stack = new ArrayDeque<>();
         ArrayDeque<Integer> queue = new ArrayDeque<>();
        */


    }

    /*public static void printMatrix(matrixOne, matrixTwo) {

        for (int row = 0; row < rows; row++) {
            String[] input = scanner.nextLine().split("\\s+");

            for (int col = 0; col < cols; col++) {
                matrixOne[row][col] = input[col].charAt(0);
            }
        }*/
    }

